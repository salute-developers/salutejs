/* eslint-disable max-len */
/* eslint-disable no-use-before-define */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Тип запроса.
 */
export type SystemMessageName =
    | 'CLOSE_APP'
    | 'MESSAGE_TO_SKILL'
    | 'RUN_APP'
    | 'SERVER_ACTION'
    | 'ANSWER_TO_USER'
    | 'ERROR'
    | 'NOTHING_FOUND'
    | 'POLICY_RUN_APP';
/**
 * Тип смартапа. Обратите внимание, что ассистент перехватывает навигационные команды 'вверх', 'вниз', 'влево' и 'вправо' только в Canvas App (тип приложения WEB_APP). В этом случае команды обрабатываются на уровне фронтенда приложения. В остальных случаях, команды передаются в бекэнд активного приложения.
 */
export type AppType = 'DIALOG' | 'WEB_APP' | 'APK' | 'CHAT_APP' | 'EMBEDDED_APP';
/**
 * Адрес графического ресурса, может быть задан в пространстве интернет, в локальном пространстве клиента, в телефонной книге клиента. Url имеет больший приоритет чем local
 */
export type ImageAddress = Url | Local | LocalContact;
/**
 * Адрес картинки в локальном пространстве клиента https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=19%3A9
 */
export type LocalImageIdentificator =
    | 'add_contactless_payment'
    | 'apple_wallet'
    | 'arrow_right_chevron_rectangle'
    | 'arrow_right_trace_line'
    | 'arrows_forward_back'
    | 'atm_banknote'
    | 'bag'
    | 'ballot_paper'
    | 'bar_graph'
    | 'basket'
    | 'beach_umbrella'
    | 'bell'
    | 'bell_crossed'
    | 'between_accounts'
    | 'boarding_pass'
    | 'bolt'
    | 'box'
    | 'building'
    | 'calculator'
    | 'camera'
    | 'candy'
    | 'capsule'
    | 'car'
    | 'card'
    | 'card_amex'
    | 'card_amex_black'
    | 'card_amex_gold'
    | 'card_blocked'
    | 'card_chevron_left'
    | 'card_ghost'
    | 'card_maestro_null'
    | 'card_mc'
    | 'card_mc_black'
    | 'card_mc_gold'
    | 'card_mc_null'
    | 'card_mir'
    | 'card_mir_black'
    | 'card_mir_gold'
    | 'card_mir_null'
    | 'card_momentum'
    | 'card_on_card'
    | 'card_plus'
    | 'card_pro100_null'
    | 'card_uek'
    | 'card_viewfinder'
    | 'card_visa_gold'
    | 'card_visa_black'
    | 'card_visa'
    | 'card_visa_infinite_sber'
    | 'card_visa_infinite'
    | 'card_visa_digital'
    | 'card_visa_null'
    | 'cards_carousel'
    | 'case'
    | 'case_diagram'
    | 'chess_piece'
    | 'circle_cross'
    | 'circle_plus'
    | 'clock'
    | 'coat_of_arms'
    | 'coin'
    | 'coin_heart'
    | 'color_spasibo'
    | 'color_total'
    | 'counterclock_wise'
    | 'crown'
    | 'digital_banknotes'
    | 'document'
    | 'document_checkmark'
    | 'document_magnifying_glass'
    | 'document_on_document'
    | 'drop'
    | 'ellipsis'
    | 'eye'
    | 'eye_crossed'
    | 'face'
    | 'face_id'
    | 'falling_coin'
    | 'file_pdf'
    | 'fingerprint'
    | 'flag'
    | 'flame'
    | 'flasher'
    | 'funnel'
    | 'gamepad'
    | 'gear'
    | 'gift'
    | 'globe'
    | 'hammer'
    | 'handset'
    | 'heart'
    | 'heart_hand'
    | 'house'
    | 'house_handset'
    | 'house_percent'
    | 'info'
    | 'key'
    | 'list'
    | 'lock_closed'
    | 'lock_opened'
    | 'magnit'
    | 'mail'
    | 'mail_eye'
    | 'mail_waves'
    | 'man_badge'
    | 'man_wheelchair'
    | 'map'
    | 'mask'
    | 'mindmap'
    | 'mobile'
    | 'mobile_plus'
    | 'mobile_plus_alt'
    | 'mobile_waves'
    | 'necklace'
    | 'note'
    | 'notebook_waves'
    | 'open_book'
    | 'other'
    | 'paper_tray'
    | 'parking'
    | 'passport'
    | 'paw'
    | 'pencil_line'
    | 'percent'
    | 'pfm'
    | 'photo'
    | 'pie_chart'
    | 'placeholder'
    | 'plane'
    | 'play'
    | 'postcard_heart'
    | 'pram'
    | 'qr_code'
    | 'receipt'
    | 'rectangle_on_dashed_rectangle'
    | 'rectangle_speech_bubble'
    | 'rectangle_speech_bubble_on_speech_bubble'
    | 'rectangle_watches'
    | 'round_speech_bubble_question'
    | 'round_watches'
    | 'ruble_dollar'
    | 'ruble_plus'
    | 'safe'
    | 'safe_diagram'
    | 'sber'
    | 'security_camera'
    | 'shield'
    | 'shield_check'
    | 'shield_crossed'
    | 'shield_lines'
    | 'shield_lines_circles'
    | 'spasibo'
    | 'speaker_waves'
    | 'square_on_square'
    | 'star_light'
    | 'student_hat'
    | 'telephone'
    | 'thermometer'
    | 'total'
    | 'trash'
    | 'tv_set'
    | 'umbrella'
    | 'user'
    | 'user_cross'
    | 'user_on_user'
    | 'vibration'
    | 'wallet'
    | 'watering_can'
    | 'waves'
    | 'waves_cross'
    | 'whistle'
    | 'wrench'
    | 'yule';
/**
 * Операционная система устройства.
 */
export type PlatformType = 'android' | 'ios' | 'web' | 'WEBDBG';
/**
 * Поверхность, от которой приходит вызов ассистента. Например, приложение СберБанк Онлайн или SberBox.
 */
export type Surface = string;
/**
 * Идентификатор персонажа, которого выбрал пользователь.
 */
export type CharacterId = 'sber' | 'athena' | 'joy';
/**
 * Имя персонажа.
 */
export type CharacterName = 'Сбер' | 'Афина' | 'Джой';
/**
 * Точность позиционирования.
 */
export type Accuracy = number;
/**
 * Географическое положение - широта.
 */
export type Latitude = number;
/**
 * Географическое положение - долгота.
 */
export type Longitude = number;
/**
 * Время фиксации геолокации в миллисекундах.
 */
export type Timestamp = number;
/**
 * Провайдер, предоставивший местоположение.
 */
export type Source = string;
export type PermissionType = 'geo' | 'read_contacts' | 'record_audio' | 'push';
export type PermissionStatus = 'granted' | 'denied_once' | 'denied_permanently';
/**
 * В этом поле клиент сообщает NLP какой персонаж выбран по дефолту
 */
export type DefaultCharacter = 'joy' | 'athena' | 'sber';
/**
 * Данные для анти-фрода, закодировааные в base64-строку.
 */
export type MobileSdkData = string;
/**
 * Результат работы антифрод-скрипта на мобильном устройстве.
 */
export type MobileSdkKav = string;
/**
 * Точка входа, через котороую зашли  в ассистента из хоста.
 */
export type HostAppState = string;
/**
 * Процент громкости.
 */
export type Percent = number;
/**
 * Откуда был инициирован голосовой запрос.
 */
export type StartAudioRecordingSource = string;
export type MediaCastStatus = 'enabled' | 'disabled';
/**
 * Название устройства, которое задал пользователь.
 */
export type Name = string;
/**
 * ID устройства в рамках MediaCastSDK.
 */
export type Id = string;
/**
 * Тип устройства.
 */
export type Type = string;
/**
 * Тип источника, из которого запущен сценарий.
 */
export type SourceType =
    | 'tray'
    | 'tabbarAppLaunchButton'
    | 'toolbarAppLaunchButton'
    | 'suggest'
    | 'card'
    | 'lavashar'
    | 'keyboard'
    | 'spotter'
    | 'autoListening'
    | 'shazam'
    | 'push'
    | 'deeplink'
    | 'repeatButton'
    | 'vps';
/**
 * Строка-содержание саджеста.
 */
export type SuggestTitle = string;
/**
 * Строка-идентификатор источника.
 */
export type SourceName = string;
/**
 * Salute ID для сквозной аналитики с фронтовыми событиями.
 */
export type SaluteIdModel = string;
/**
 * Выбранная локаль в мобильном приложении.
 */
export type Locale = string;
/**
 * Список подцензурных категорий, обнаруженных в тексте или реплике пользователя.
 */
export type CensorClass = 'politicians' | 'obscene' | 'model_response';
/**
 * Список характеристик эмоциональной окраски текста пользователя.
 */
export type PhraseEmotions = 'negative' | 'positive' | 'neutral';
export type CompositeTokenName =
    | 'MONEY_TOKEN'
    | 'PERSON_TOKEN'
    | 'TIME_DATE_TOKEN'
    | 'TIME_TIME_TOKEN'
    | 'PERIOD_TOKEN'
    | 'RELATIVE_TIME_TOKEN'
    | 'TIME_DATE_INTERVAL_TOKEN'
    | 'GEO_TOKEN'
    | 'ORG_TOKEN';
export type ListOfTokenTypesData = {
    token_type: string;
    token_value: TokenValue;
    [k: string]: unknown;
}[];
/**
 * Эмоция ассистента, которую он показывает с помощью анимации кнопки.
 */
export type EmotionId =
    | 'igrivost'
    | 'udovolstvie'
    | 'podavleniye_gneva'
    | 'smushchennaya_ulibka'
    | 'simpatiya'
    | 'oups'
    | 'laugh'
    | 'ok_prinyato'
    | 'bespokoistvo'
    | 'predvkusheniye'
    | 'vinovatiy'
    | 'zhdu_otvet'
    | 'zadumalsa'
    | 'neznayu'
    | 'nedoumenie'
    | 'nedovolstvo'
    | 'nesoglasie'
    | 'pechal'
    | 'radost'
    | 'sochuvstvie'
    | 'strakh'
    | 'zainteresovannost';
export type Action =
    | TextAction
    | DeepLinkAction
    | SendContactPhone
    | ServerAction
    | CopyTextAction
    | OpenKeyboard
    | ShareTextAction
    | SmartappTextAction;
export type Card =
    | ExtendedListCard
    | GalleryCard
    | GridCard
    | ListCard
    | QRCodeCard
    | DiscoveryCard
    | WidgetGalleryWithCategories
    | WidgetGallery
    | WidgetSingleCard
    | WidgetTitleCard
    | WidgetTwoColumns
    | WidgetNestedContentCard
    | WidgetButton
    | WidgetVerticalCards
    | SimpleList
    | OperatorCard;
/**
 * Карточка со списком ячеек и одной картинкой
 */
export type ExtendedListCard = CardBase & {
    cells: SimpleCellView[];
    cell_image: ExtendedImageView;
    type: 'extended_list_card';
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    background_image?: FlexibleImageView;
    background_color?: SurfaceColor & string;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
};
/**
 * Возможные размеры отступов
 */
export type Dimension = '0x' | '1x' | '2x' | '3x' | '4x' | '5x' | '6x' | '7x' | '8x' | '9x' | '10x' | '12x' | '16x';
export type SimpleCellView = TextCellView | ButtonCellView;
/**
 * Стиль текста, см https://www.figma.com/file/D0AfmXWT5KBPiWFNg2IZoF/SmartX-Typeface?node-id=0%3A1
 */
export type Typeface =
    | 'display1'
    | 'display2'
    | 'display3'
    | 'headline1'
    | 'headline2'
    | 'headline3'
    | 'headline4'
    | 'headline5'
    | 'headline6'
    | 'title1'
    | 'title2'
    | 'body1'
    | 'body2'
    | 'body3'
    | 'body4'
    | 'body_ai'
    | 'text1'
    | 'paragraphText1'
    | 'paragraphText2'
    | 'footnote1'
    | 'footnote2'
    | 'footnote3'
    | 'button1'
    | 'button2'
    | 'caption'
    | 'underline';
/**
 * Новый Plasma стиль текста, см https://www.figma.com/design/6d5rHWn3aYwEbNap01Nvp8/ASDK-Styles?node-id=1800-16853&m=dev
 */
export type PlasmaTypeface =
    | 'display_l_bold'
    | 'display_l_normal'
    | 'display_m_bold'
    | 'display_m_normal'
    | 'display_s_bold'
    | 'display_s_normal'
    | 'header_h1_bold'
    | 'header_h1_normal'
    | 'header_h2_bold'
    | 'header_h2_normal'
    | 'header_h3_bold'
    | 'header_h3_normal'
    | 'header_h4_bold'
    | 'header_h4_normal'
    | 'header_h5_bold'
    | 'header_h5_normal'
    | 'body_l_bold'
    | 'body_l_normal'
    | 'body_m_bold'
    | 'body_m_normal'
    | 'body_s_bold'
    | 'body_s_normal'
    | 'body_xs_bold'
    | 'body_xs_normal'
    | 'body_xxs_bold'
    | 'body_xxs_normal'
    | 'text_l_bold'
    | 'text_l_normal'
    | 'text_m_bold'
    | 'text_m_normal'
    | 'text_s_bold'
    | 'text_s_normal'
    | 'text_xs_bold'
    | 'text_xs_normal';
/**
 * Цвет текста см https://www.figma.com/file/yaeE0lLDWMBKKLXuDHgq1p/SmartX-Styles?node-id=239%3A64
 */
export type TypeColor = 'default' | 'secondary' | 'tertiary' | 'inverse' | 'brand' | 'warning' | 'critical' | 'link';
/**
 * Цвет текста и иконок. Если в поле приходит цвет не из списка,то дефолт выбирается по логике - в названии ищется вхождение слов key.contains('inverse') -> default='inverseTextPrimary', key.contains('onDark') -> default='onDarkTextPrimary', key.contains('onLight') -> default='onLightTextPrimary'. Если в названии нового цвета не содержится inverse/onDark/onLight, то default='textPrimary' см https://www.figma.com/file/6d5rHWn3aYwEbNap01Nvp8/ASDK-Styles?type=design&node-id=1306-2159&mode=design&t=s7hMV9yw39IBobKL-0
 */
export type PlasmsColor =
    | 'textPrimary'
    | 'textSecondary'
    | 'textTertiary'
    | 'textParagraph'
    | 'textAccent'
    | 'textGradient'
    | 'textPositive'
    | 'textWarning'
    | 'textNegative'
    | 'onDarkTextPrimary'
    | 'onDarkTextSecondary'
    | 'onDarkTextTertiary'
    | 'onDarkTextParagraph'
    | 'onDarkTextAccent'
    | 'onDarkTextGradient'
    | 'onDarkTextPositive'
    | 'onDarkTextWarning'
    | 'onDarkTextNegative'
    | 'onLightTextPrimary'
    | 'onLightTextSecondary'
    | 'onLightTextTertiary'
    | 'onLightTextParagraph'
    | 'onLightTextAccent'
    | 'onLightTextGradient'
    | 'onLightTextPositive'
    | 'onLightTextWarning'
    | 'onLightTextNegative'
    | 'inverseTextPrimary'
    | 'inverseTextSecondary'
    | 'inverseTextTertiary'
    | 'inverseTextParagraph';
export type Actions = Action[];
/**
 * Выравнивание элемента по горизонтали.
 */
export type HorizontalGravity = 'left' | 'center' | 'right';
/**
 * Возможные варианты скругления углов изображения
 */
export type RoundedCorners = 'none' | 'rounded' | 'circle';
/**
 * Размер кнопки (фактически - ее высота) из ДС (Плазмы)
 */
export type ButtonSize = 'small' | 'medium';
/**
 * Новый Plasma стиль текста, см https://www.figma.com/design/6d5rHWn3aYwEbNap01Nvp8/ASDK-Styles?node-id=1800-16853&m=dev
 */
export type PlasmaTypeface1 =
    | 'display_l_bold'
    | 'display_l_normal'
    | 'display_m_bold'
    | 'display_m_normal'
    | 'display_s_bold'
    | 'display_s_normal'
    | 'header_h1_bold'
    | 'header_h1_normal'
    | 'header_h2_bold'
    | 'header_h2_normal'
    | 'header_h3_bold'
    | 'header_h3_normal'
    | 'header_h4_bold'
    | 'header_h4_normal'
    | 'header_h5_bold'
    | 'header_h5_normal'
    | 'body_l_bold'
    | 'body_l_normal'
    | 'body_m_bold'
    | 'body_m_normal'
    | 'body_s_bold'
    | 'body_s_normal'
    | 'body_xs_bold'
    | 'body_xs_normal'
    | 'body_xxs_bold'
    | 'body_xxs_normal'
    | 'text_l_bold'
    | 'text_l_normal'
    | 'text_m_bold'
    | 'text_m_normal'
    | 'text_s_bold'
    | 'text_s_normal'
    | 'text_xs_bold'
    | 'text_xs_normal';
/**
 * Режим растягивания контента внутри контейнера
 */
export type ScaleMode = 'scale_aspect_fill' | 'scale_aspect_fit' | 'center' | 'top' | 'bottom';
/**
 * Цвет фона см https://www.figma.com/file/yaeE0lLDWMBKKLXuDHgq1p/SmartX-Styles?node-id=19%3A15
 */
export type Color =
    | 'solid_black'
    | 'solid_white'
    | 'solid_transparent'
    | 'solid_disabled'
    | 'solid_brand'
    | 'solid_warning'
    | 'solid_critical'
    | 'solid_action'
    | 'secondary'
    | 'liquid_60'
    | 'liquid_50'
    | 'liquid_40'
    | 'liquid_30'
    | 'liquid_20'
    | 'liquid_10'
    | 'clear_transparent';
/**
 * Выравнивание элемента по вертикали.
 */
export type VerticalGravity = 'top' | 'center' | 'bottom';
/**
 * Размер изображения относительно карточки, учитывается при отсутствии width или height
 */
export type ContentSize = MatchParentContentSize | FixedContentSize;
export type ContentWidth = FixedContentWidth | MatchParent | Columns;
export type ContentHeight = FixedContentHeight | AspectRatio;
/**
 * Набор стилей различных поверхностей и подложек см https://www.figma.com/file/L6AlpyUxFuumKEEbh4ADIh/%F0%9F%8C%80Plasma-Styles?node-id=5367%3A696
 */
export type SurfaceColor =
    | 'card'
    | 'transparent_primary'
    | 'transparent_secondary'
    | 'transparent_tertiary'
    | 'solid_primary'
    | 'solid_secondary'
    | 'solid_tertiary'
    | 'clear_transparent';
/**
 * Горизонтальная галерея
 */
export type GalleryCard = CardBase & {
    /**
     * @minItems 1
     */
    items: [GalleryItem, ...GalleryItem[]];
    /**
     * Подпись под галереей
     */
    bottom_text?: TextView;
    type: 'gallery_card';
    [k: string]: unknown;
};
export type GalleryItem = MediaGalleryItem | GallerySearchContentItem | GalleryMoreButtonItem;
/**
 * Ширина контента в терминах сеток. https://www.figma.com/file/L6AlpyUxFuumKEEbh4ADIh/🤖SD-Styles?node-id=26%3A17 https://www.figma.com/file/c6KZ9jIXTB5zEmyTfA2Akv/Message-Based?node-id=1446%3A0
 */
export type GridContentWidth = 'xsmall' | 'small' | 'medium' | 'large' | 'resizable';
/**
 * Возможные значения размеров изображения.
 */
export type IconSizeDimension = 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge';
/**
 * Градиенты Plasma, см https://www.figma.com/file/ndmRHZxZo1bD8DuAnRsOtL/%F0%9F%8C%80Plasma-Mobile?node-id=6520%3A119
 */
export type Gradient = 'gradient_sber' | 'gradient_athena' | 'gradient_joy';
/**
 * Двумерная карточка (сетка)
 */
export type GridCard = CardBase & {
    /**
     * Количество ячеек
     */
    items: GridItem[];
    type: 'grid_card';
    /**
     * Количество столбцов
     */
    columns?: number;
    item_width?: GridContentWidth & string;
    /**
     * Высота карточки
     */
    item_height?: 'fixed' | 'resizable';
    [k: string]: unknown;
};
export type GridItem = GreetingGridItem;
/**
 * Карточка с вертикальным списком ячеек.
 */
export type ListCard = CardBase & {
    cells: CellView[];
    type: 'list_card';
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    background_image?: FlexibleImageView;
    background_color?: SurfaceColor & string;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
};
export type CellView =
    | LeftRightCellView
    | HorizontalStackCellView
    | TextCellView
    | ButtonCellView
    | ImageCellView
    | DetailsCellView
    | WeatherCellView
    | RightSideCellView
    | FlexibleImageCellView
    | HorizontalCellsView
    | OperatorChatCellView;
export type LeftView =
    | SimpleLeftView
    | FastAnswerLeftView
    | FlexibleImageLeftRightCellView
    | ImageTextsLeftCellView
    | PlasmaButtonCellView;
export type RightView =
    | DisclosureRightView
    | DetailRightView
    | RoundButtonCellView
    | TagCellView
    | FlexibleImageLeftRightCellView
    | RightCellArrayView
    | PlasmaButtonCellView;
export type HorizontalCellContentView = VerticalIconTextView | SpacerView;
/**
 * https://www.figma.com/file/b5K8naZPDs3pE6pafBkoz8/%F0%9F%8C%80Plasma-Styles-Salute?node-id=5%3A213
 */
export type ButtonColor =
    | 'primary_default'
    | 'secondary'
    | 'clear'
    | 'success'
    | 'warning'
    | 'critical'
    | 'checked'
    | 'global_black'
    | 'global_black_secondary'
    | 'global_black_transparent'
    | 'global_white'
    | 'global_white_secondary';
/**
 * Горизонтальный упорядоченный список карточек одной категории
 *
 * @minItems 1
 */
export type Items = [DiscoveryCard | ListCard, ...(DiscoveryCard | ListCard)[]];
/**
 * Встроенный блок с контентом
 */
export type NestedContent = NestedContentGallery | NestedContentList;
/**
 * Карточка с вертикальным списком ячеек.
 */
export type SimpleList = CardBase & {
    header: string;
    footer?: string;
    items?: SimpleItem[];
    type: 'simple_list';
    [k: string]: unknown;
};
/**
 * Доступные id контекстов для поиска. Например, если задать для какого-то контекста префиксы ('позвони', 'набери'), то ASR будет искать в этом контексте только, если встретит слова 'позвони' или 'набери'. Если задать пустой набор префиксов, то ASR будет искать в этом контексте в любом случае. Таким образом, если мы хотим, чтобы поиск происходил по всем дефолтным префиксам, для значений идентификаторов контекста context_id (mobile_contacts, vk_contacts, vk.fiends) префиксы указывать необязательно.
 */
export type ASRContextsId = string;

export interface SystemMessage {
    /**
     * Идентификатор сессии, который обновляется каждый раз, когда в поле new_session приходит true. При использовании совместно с messageId помогает гарантировать уникальность сообщения. В том числе если пользователь взаимодействует с несколькими поверхностями.
     */
    sessionId: string;
    /**
     * Идентификатор запроса, который отправил ассистент. Ответ на запрос должен содержать такой же идентификатор в поле messageId.
     */
    messageId: number;
    uuid: UUID;
    messageName: SystemMessageName;
    payload: SystemMessagePayload;
    [k: string]: unknown;
}
/**
 * Составной идентификатор пользователя.
 */
export interface UUID {
    /**
     * Идентификатор канала коммуникации.
     */
    userChannel: string;
    /**
     * Постоянный идентификатор пользователя созданный на основе SberID. Может отсутствовать, если пользователь не аутентифицирован. Может использовать для хранения контекста диалога пользователя. Контекст диалога можно обновлять по значению поля new_session.
     */
    sub: string;
    /**
     * Идентификатор, который используется для определения не аутентифицированных пользователей. Идентификатор может изменяться при сбросе настроек или переустановке смартапа.
     */
    userId: string;
    [k: string]: unknown;
}
/**
 * Коллекция, в которой в зависимости от потребителя и messageName передается дополнительная информация.
 */
export interface SystemMessagePayload {
    app_info: AppInfo;
    /**
     * Флаг, говорящий о том, нужно ли активировать апп, указанный в app_info, в случае если он сейчас не активен.
     */
    activate_app_info?: boolean & string;
    device?: Device;
    character: Character;
    /**
     * Имя смартапа, которое задается при создании проекта и отображается в каталоге приложений.
     */
    projectName?: string;
    strategies?: Strategies;
    /**
     * Интент, который смартап получит в следующем ответе ассистента.
     */
    intent?: string;
    /**
     * Исходный интент. Значение поля отличается от значения intent только при монопольном захвате контекста.
     */
    original_intent?: string;
    /**
     * Мета данные, полученные от сервиса распознавания интентов.
     */
    intent_meta?:
        | number
        | string
        | boolean
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | null;
    meta: Meta;
    selected_item?: SelectedItem;
    /**
     * Указывает на характер запуска смартапа. Если поле содержит true, сессии присваивается новый идентификатор (поле sessionId). true — приложение запущено впервые или после закрытия приложения, а так же при запуске приложения по истечению тайм-аута (10 минут) или после прерывания работы приложения, например, по запросу 'текущее время'.
     */
    new_session?: boolean;
    annotations?: Annotations;
    message?: Message;
    server_action?: {
        type?: string;
        payload?: {
            [k: string]: unknown;
        };
        app_info?:
            | {
                  systemName: string;
                  [k: string]: unknown;
              }
            | {
                  projectId: string;
                  [k: string]: unknown;
              };
        parameters?: {
            [k: string]: unknown;
        };
        [k: string]: unknown;
    };
    /**
     * Указывает, что ассистент должен слушать пользователя после выполнения действия.
     */
    auto_listening?: boolean;
    /**
     * Текст, который ассистент озвучит пользователю.
     */
    pronounceText?: string;
    /**
     * Указывает, что в тексте, который необходимо озвучить (поле pronounceText).
     */
    pronounceTextType?: 'application/text' | 'application/ssml';
    emotion?: Emotion;
    /**
     * Список команд и элементов интерфейса смартапа.
     */
    items?: (AssistantCommand | BubbleCommand | CardCommand | PolicyRunAppComand)[];
    /**
     * SID идентификатор
     */
    sid?: string;
    suggestions?: Suggestions;
    asr_hints?: ASRHints;
    hints?: Hints;
    /**
     * Сообщает ассистенту о завершении работы смартапа. В приложениях типа Canvas App необходимо самостоятельно закрывать окно приложения после завершения работы смартапа. Для этого требуется передать ассистенту команду close_app с помощью метода assistant.close() или window.AssistantHost.close(), если вы не используете Assistant Client.
     */
    finished?: boolean;
    /**
     * Массив кнопок в правой части хедера чатаппа. Не более 2х элементов.
     */
    header_buttons?: {
        icon_address: ImageAddress;
        actions?: Actions;
        /**
         * Id для отправки в метрику.
         */
        log_id?: string;
        /**
         * Бейдж для отображения доступности оператора для чата с оператором
         */
        icon_badge?: 'enabled' | 'disabled';
        [k: string]: unknown;
    }[];
    /**
     * Код ошибки.
     */
    code?: number;
    /**
     * Описание ошибки.
     */
    description?: string;
    [k: string]: unknown;
}
/**
 * Информация о смартапе.
 */
export interface AppInfo {
    /**
     * Идентификатор проекта в SmartApp Studio.
     */
    projectId: string;
    /**
     * Идентификатор смартапа.
     */
    applicationId: string;
    /**
     * Идентификатор опубликованной версии смартапа.
     */
    appversionId: string;
    /**
     * Ссылка на веб-приложение. Поле актуально для Canvas Apps.
     */
    frontendEndpoint?: string;
    frontendType: AppType;
    /**
     * Более читаемый аналог поля projectId. Не актуален для внешних приложений.
     */
    systemName?: string;
    /**
     * Объединённое значение полей projectId, applicationId и appversionId.
     */
    frontendStateId?: string;
    /**
     * Никнейм бота c2b чата.
     */
    botNickname?: string;
    /**
     * Тип идентификации аппа. Например, банковский апп, партнерский и др.
     */
    affiliationType?: 'INTERNAL' | 'BANKING' | 'ECOSYSTEM' | 'EXTERNAL' | 'PARTNERSHIP';
    appearance?: Appearance;
    securityAccess?: SecurityAccess;
    /**
     * Доступность c2b чатов.
     */
    c2bEnabled?: boolean;
    /**
     * Возможность добавления аппа в трей.
     */
    trayDisplay?: boolean;
    /**
     * Определяет, в каком режиме умеет отображаться канвасс.
     */
    availableOrientations?: unknown[];
    /**
     * Текущий режим отображения канвасса.
     */
    canvasType?: 'ordinary' | 'fullscreen';
    /**
     *  Возможноть запускать апп через FastRunApp
     */
    allowFastRunApp?: boolean;
    /**
     * Показывать нативный хеадер в аппе
     */
    nativeHeader?: boolean;
    [k: string]: unknown;
}
/**
 * UI-информация отображения аппа
 */
export interface Appearance {
    header: HeaderAppearance;
    [k: string]: unknown;
}
/**
 * UI-информация отображения header'a аппа
 */
export interface HeaderAppearance {
    /**
     * Текст header'a
     */
    title: string;
    /**
     * Текст подзаголовка header'a
     */
    subtitle?: string;
    icon?: ImageAddress;
    [k: string]: unknown;
}
export interface Url {
    /**
     * Тип ресурса.
     */
    type: 'url';
    /**
     * Адрес картинки в интернете
     */
    url: string;
    /**
     * Hash картинки в интернете(опционален)
     */
    hash?: string;
    /**
     * Массив картинок для разных цветовых схем(опционален).
     */
    urls?: ContentColorSchemeImage[];
    /**
     * Заглушка, которую показываем, когда нет изображения или оно невалидно(опционален)
     */
    placeholder?: LocalImageIdentificator;
    [k: string]: unknown;
}
/**
 * Модель картинки для цветовой схемы.
 */
export interface ContentColorSchemeImage {
    /**
     * Цветовая схема картинки.
     */
    color_scheme?: 'light' | 'dark';
    /**
     * Адрес изображения в интернете
     */
    url: string;
    /**
     * Hash картинки в интернете(опционален)
     */
    hash?: string;
    [k: string]: unknown;
}
export interface Local {
    /**
     * Тип ресурса.
     */
    type: 'local';
    identificator: LocalImageIdentificator;
    [k: string]: unknown;
}
export interface LocalContact {
    /**
     * Тип ресурса.
     */
    type: 'localcontact';
    /**
     * Захешированное значение телефона, соответствующего контакту в переданной адресной книге
     */
    local_contact_hash: string;
    [k: string]: unknown;
}
/**
 * Настройки доступности параметров для банковских канвасов.
 */
export interface SecurityAccess {
    /**
     * Аппу разрешена загрузка: true - с любых ресурсов, false - только с ресурса ПАО.
     */
    allowExternalDomain?: boolean;
    /**
     * Аппу разрешен доступ к файловой системе устройства.
     */
    enableFileAccess?: boolean;
    /**
     * Аппу требуется ssl-pinning.
     */
    sslPinningEnabled?: boolean;
    /**
     * Аппу разрешёно сохранение файлов на устройство пользователя: 1 - разрешён, 0 или любое другое значение - запрещён.
     */
    canvasFileSaveAllowed?: number;
    /**
     * Аппу разрешёно запрашивать геопозицию: 1 - разрешён, 0 или любое другое значение - запрещён.
     */
    geo?: number;
    [k: string]: unknown;
}
/**
 * Информация об устройстве пользователя.
 */
export interface Device {
    /**
     * Идентификатор устройства.
     */
    deviceId: string;
    platformType: PlatformType;
    /**
     * Версия операционной системы.
     */
    platformVersion: string;
    surface: Surface;
    /**
     * Версия поверхности.
     */
    surfaceVersion: string;
    features: Features;
    capabilities: Capabilities;
    /**
     * Дополнительная информация об объекте или устройстве. В настоящий момент не используется.
     */
    additionalInfo:
        | number
        | string
        | boolean
        | {
              [k: string]: unknown;
          }
        | unknown[]
        | null;
    [k: string]: unknown;
}
/**
 * Описание функциональности устройства.
 */
export interface Features {
    /**
     * Типы смартапов, которые поддерживает устройство.
     */
    appTypes: AppType[];
    [k: string]: unknown;
}
/**
 * Описание возможностей устройства пользователя.
 */
export interface Capabilities {
    /**
     * Описание экрана устройства.
     */
    screen?: {
        /**
         * Признак наличия экрана.
         */
        available: boolean;
        [k: string]: unknown;
    };
    /**
     * Описание микрофона устройства.
     */
    mic?: {
        /**
         * Признак наличия микрофона.
         */
        available: boolean;
        [k: string]: unknown;
    };
    /**
     * Описание динамиков устройства.
     */
    speak?: {
        /**
         * Признак наличия динамика.
         */
        available: boolean;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Информация о текущем персонаже ассистента, который установлен у пользователя.
 */
export interface Character {
    id: CharacterId;
    name: CharacterName;
    /**
     * Пол персонажа. Учитывайте пол персонажа при проектировании ответов.
     */
    gender: 'female' | 'male';
    /**
     * Форма обращения персонажа. Учитывайте форму обращения персонажа при проектировании ответов.
     */
    appeal: 'official' | 'no_official';
    [k: string]: unknown;
}
/**
 * Возможные стратегии смартапа.
 */
export interface Strategies {
    /**
     * Сообщает, что у пользователя сегодня день рождения.
     */
    happy_birthday?: boolean;
    /**
     * Время, которое прошло с момента последнего обращения к смартапу.
     */
    last_call?: string;
    /**
     * Передается только в том случае, когда биометрия определила голос Яндекс Алисы. В остальных случаях поле отсутствует.
     */
    is_alice?: boolean;
    [k: string]: unknown;
}
/**
 * Данные о содержимом экрана пользователя.
 */
export interface Meta {
    location?: Location;
    time?: Time;
    current_app?: {
        app_info: AppInfo;
        state: AppState;
        [k: string]: unknown;
    };
    background_apps?: {
        app_info: AppInfo;
        state: AppState1;
        [k: string]: unknown;
    }[];
    permissions?: {
        type?: PermissionType;
        status?: PermissionStatus;
        [k: string]: unknown;
    }[];
    default_character?: DefaultCharacter;
    mobile_sdk_data?: MobileSdkData;
    mobile_sdk_kav?: MobileSdkKav;
    host_app_state?: HostAppState;
    volume?: Volume;
    start_audio_recording_source?: StartAudioRecordingSource;
    sbercast?: MediaCastModel;
    host_meta?: HostMetaModel;
    capabilities_state?: CapabilitiesState;
    source?: VpsMessageReasonModel;
    sid?: SaluteIdModel;
    locale?: Locale;
    [k: string]: unknown;
}
export interface Location {
    accuracy?: Accuracy;
    lat: Latitude;
    lon: Longitude;
    timestamp?: Timestamp;
    source?: Source;
    [k: string]: unknown;
}
/**
 * Данные о текущем времени на устройстве пользователя.
 */
export interface Time {
    /**
     * Наименование часового пояса. Пример Europe/Moscow.
     */
    timezone_id: string;
    timezone_offset_sec: number;
    /**
     * Unix-время в миллисекундах.
     */
    timestamp: number;
    [k: string]: unknown;
}
export interface AppState {
    item_selector?:
        | number
        | string
        | boolean
        | {
              [k: string]: unknown;
          }
        | unknown[];
    [k: string]: unknown;
}
export interface AppState1 {
    [k: string]: unknown;
}
/**
 * Уровень громкости установленный на телефоне в процентах.
 */
export interface Volume {
    percent: Percent;
    [k: string]: unknown;
}
/**
 * Параметры сберкаста.
 */
export interface MediaCastModel {
    status: MediaCastStatus;
    connected_devices?: {
        name: Name;
        id: Id;
        type: Type;
        [k: string]: unknown;
    }[];
    [k: string]: unknown;
}
/**
 * Произвольный JSON-объект, который заполняет хост приложение, в которое встроено Assistant SDK.
 */
export interface HostMetaModel {
    /**
     * Состоянии шторки асситента short - видна США, long - видна РАША/КанвасАпп/Чатапп
     */
    asdk_panel_state?: 'short' | 'long';
    [k: string]: unknown;
}
export interface CapabilitiesState {
    screen?: {
        orientation?: 'portrait' | 'landscape';
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Модель данных об источнике перехода.
 */
export interface VpsMessageReasonModel {
    sourceType: SourceType;
    suggestTitle?: SuggestTitle;
    sourceName?: SourceName;
    [k: string]: unknown;
}
/**
 * Описание элемента экрана, который пользователь назвал при запросе ('включи второй'/'включи второго терминатора'). Для работы этой функциональности нужна отправка во входящем сообщении с фронтенда item_selector со списком элементов. Объект передаётся всегда и может быть либо пустым, либо содержать все указанные поля.
 */
export interface SelectedItem {
    /**
     * Номер элемента из списка, начиная с 0.
     */
    index: number;
    /**
     * Название элемента.
     */
    title: string;
    /**
     * Указывает выбор элемента по номеру.
     */
    is_query_by_number: boolean;
    [k: string]: unknown;
}
/**
 * Общие характеристики сообщения пользователя.
 */
export interface Annotations {
    /**
     * Информация о прохождении цензуры.
     */
    censor_data: {
        classes: CensorClass[];
        /**
         * Коэффициенты подцензурных категорий в диапазоне от 0 до 1.
         */
        probas: number[];
        [k: string]: unknown;
    };
    /**
     * Эмоциональная окраска текста пользователя.
     */
    text_sentiment: {
        classes: PhraseEmotions[];
        /**
         * Коэффициенты той или иной эмоциональной характеристики текста пользователя в диапазоне от 0 до 1.
         */
        probas: number[];
        [k: string]: unknown;
    };
    /**
     * Эмоциональная окраска голоса пользователя.
     */
    asr_sentiment: {
        classes: PhraseEmotions[];
        /**
         * Коэффициенты той или иной эмоциональной характеристики реплики пользователя в диапазоне от 0 до 1.
         */
        probas: number[];
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Результат предобработки.
 */
export interface Message {
    /**
     * Исходное сообщение пользователя: распознанный голос или введенный текст. В случае распознанного голоса предоставляется текст запроса без нормализации числительных и другого, соответственно, все числа, номера телефонов и тд представлены словами.
     */
    original_text: string;
    /**
     * Нормализованный текст, который ввел пользователь. Можно использовать для снижения многообразия запросов, например, для аналитики.
     */
    normalized_text: string;
    /**
     * Отображаемый на экране текст запроса/нормализованный на этапе ASR запрос.
     */
    asr_normalized_message: string;
    entities: Entities;
    tokenized_elements_list: TokenizedElementsList[];
    [k: string]: unknown;
}
/**
 * Извлеченные из запроса сущности.
 */
export interface Entities {
    CCY_TOKEN?: CcyToken[];
    MONEY_TOKEN?: MoneyToken[];
    NUM_TOKEN?: NumToken[];
    TIME_TIME_TOKEN?: TimeTimeToken[];
    TIME_DATE_TOKEN?: TimeDateToken[];
    TIME_MONTH_TOKEN?: TimeMonthToken[];
    TIME_TEMPORAL_TOKEN?: TimeTemporalToken[];
    PERIOD_TOKEN?: number[];
    RELATIVE_TIME_TOKEN?: number[];
    [k: string]: unknown;
}
export interface CcyToken {
    value: string;
    [k: string]: unknown;
}
export interface MoneyToken {
    amount: number;
    currency: string;
    [k: string]: unknown;
}
export interface NumToken {
    adjectival_number: boolean;
    value: number;
    [k: string]: unknown;
}
export interface TimeTimeToken {
    hours: number;
    minutes: number;
    seconds: number;
}
export interface TimeDateToken {
    day?: number;
    month?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    year?: number;
}
export interface TimeMonthToken {
    month: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
}
export interface TimeTemporalToken {
    value: string;
}
export interface TokenizedElementsList {
    dependency_type?: string;
    grammem_info?: GrammemInfo;
    head?: number;
    lemma: string;
    list_of_dependents?: number[];
    text: string;
    composite_token_length?: number;
    composite_token_type?: CompositeTokenName;
    composite_token_value?: MoneyToken | TimeTimeToken | TimeDateToken | number | string;
    is_beginning_of_composite?: boolean;
    list_of_token_types_data?: ListOfTokenTypesData;
    token_type?: string;
    token_value?: TokenValue;
    [k: string]: unknown;
}
export interface GrammemInfo {
    aspect?: string;
    mood?: string;
    number?: string;
    part_of_speech: string;
    person?: string;
    raw_gram_info: string;
    transitivity?: string;
    verbform?: string;
    voice?: string;
    numform?: string;
    degree?: string;
    case?: string;
    gender?: string;
    animacy?: string;
    [k: string]: unknown;
}
export interface TokenValue {
    adjectival_number?: boolean;
    value: number | string;
    [k: string]: unknown;
}
/**
 * Эмоция, которую нужно отобразить в лавашаре
 */
export interface Emotion {
    emotionId: EmotionId;
    [k: string]: unknown;
}
export interface AssistantCommand {
    command:
        | SmartAppDataCommand
        | ActionCommand
        | CloseAppCommand
        | PermissionCommand
        | InvoiceCommand
        | SmartAppErrorCommand
        | OperatorCardCommand
        | RequestHashOfContactsCommand
        | RequestContactsCommand
        | RequestHashesCommand
        | RequestContactPhoneCommand;
    [k: string]: unknown;
}
/**
 * Команда для передачи данных в Canvas App.
 */
export interface SmartAppDataCommand {
    type: 'smart_app_data';
    /**
     * Валидный JSON-объект с произвольными данными для смартапа.
     */
    smart_app_data?: {
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
export interface ActionCommand {
    type: 'action';
    action: Action;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает отправку сообщения от имени пользователя в чат с ассистентом.
 */
export interface TextAction {
    /**
     * Тип действия.
     */
    type: 'text';
    /**
     * Текст сообщения от имени пользователя.
     */
    text: string;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает обработку диплинка ассистентом или хост-приложением.
 */
export interface DeepLinkAction {
    /**
     * Тип действия.
     */
    type: 'deep_link';
    /**
     * Диплинк, который нужно открыть.
     */
    deep_link: string;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает отправку номера телефона указанного контакта
 */
export interface SendContactPhone {
    /**
     * Тип действия.
     */
    type: 'send_contact_phone';
    /**
     * Id контакта
     */
    send_contact_phone: number;
    /**
     * Может содержать подстроку [[placeholder]]. Клиент должен подставить в строку шаблона вместо [[placeholder]] номер телефона контакта имеющий id указаный в send_contact_phone
     */
    template?: string;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает обработку сервер-экшена ассистентом или хост-приложением.
 */
export interface ServerAction {
    /**
     * Тип действия.
     */
    type: 'server_action';
    /**
     * Данная строка будет подставлена в исходящее с мобильного SDK системное сообщение в поле MESSAGE_NAME.
     */
    message_name?: string;
    /**
     * Используется для фильтрации данных, явно указывающая на то, что server_action не может повлиять на состояние UI в SDK (фильтруется озвучка, саджесты и возможность открыть новый экран).
     */
    mode?: 'background' | 'foreground';
    /**
     * Сервер-экшен, который нужно отправить.
     */
    server_action: {
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает копирование текста из карточки в буфер обмена.
 */
export interface CopyTextAction {
    /**
     * Тип действия.
     */
    type: 'copy_text_to_buffer';
    /**
     * Текст, который будет скопирован в буфер обмена.
     */
    text: string;
    [k: string]: unknown;
}
/**
 * Действие, означающее поднятие клавиатуры для ввода.
 */
export interface OpenKeyboard {
    /**
     * Тип действия.
     */
    type: 'open_keyboard';
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает шаринг текста.
 */
export interface ShareTextAction {
    /**
     * Тип действия.
     */
    type: 'share_text';
    /**
     * Текст, который нужно отправить
     */
    text: string;
    [k: string]: unknown;
}
/**
 * Действие, которое обозначает отправку в canvas команды в свободном текстовом формате
 */
export interface SmartappTextAction {
    /**
     * Тип действия.
     */
    type: 'smartapp_text';
    /**
     * Текст команды для передачи канвасу.
     */
    smartapp_text: string;
    [k: string]: unknown;
}
/**
 * Закрытие смартапа.
 */
export interface CloseAppCommand {
    type: 'close_app';
    [k: string]: unknown;
}
/**
 * Запрос разрешений на получение и обработку данных пользователя.
 */
export interface PermissionCommand {
    type: 'request_permissions';
    permissions: PermissionType[];
    [k: string]: unknown;
}
/**
 * Команда для получения инвойса платежа.
 */
export interface InvoiceCommand {
    type: 'payment_invoice';
    payment_invoice: {
        /**
         * Идентификатор инвойса.
         */
        invoice_id: string;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Команда для прокидывания ошибки в Canvas App.
 */
export interface SmartAppErrorCommand {
    type: 'smart_app_error';
    smart_app_error: {
        code: number;
        description: string;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Команда изменения состояния карточки оператора
 */
export interface OperatorCardCommand {
    type: 'transfer_to_operator_action';
    action: 'open_chat' | 'close_widget';
    /**
     * mid карточки
     */
    message_id: number;
    [k: string]: unknown;
}
/**
 * Запрос всех контактов из адресной книги в виде хеш-сумм
 */
export interface RequestHashOfContactsCommand {
    type: 'request_hash_of_contacts';
    [k: string]: unknown;
}
/**
 * Запрос всех контактов из адресной книги
 */
export interface RequestContactsCommand {
    type: 'request_contacts';
    [k: string]: unknown;
}
/**
 * Запрос контактов из адресной книги по хешу телефона
 */
export interface RequestHashesCommand {
    type: 'request_hashes';
    /**
     * Массив хэшей телефонов
     */
    hashes: string[];
    [k: string]: unknown;
}
/**
 * Запрос номера телефона адресной книги по идентификатору контакта
 */
export interface RequestContactPhoneCommand {
    type: 'request_contact_phone';
    /**
     * Идентификатор контакта
     */
    id: string;
    timeout?: number;
    [k: string]: unknown;
}
export interface BubbleCommand {
    bubble: Bubble;
    [k: string]: unknown;
}
/**
 * Передача текста.
 */
export interface Bubble {
    /**
     * Текст, который отобразит ассистент.
     */
    text: string;
    /**
     * Указывает, что текст содержит маркдаун-разметку, которую необходимо обработать.
     */
    markdown?: boolean;
    /**
     * Поведение шторки ассистента. Параметр актуален при работе с ассистентом на наших устройствах.
     */
    expand_policy?: 'auto_expand' | 'force_expand' | 'preserve_panel_state';
    [k: string]: unknown;
}
export interface CardCommand {
    card: Card;
    [k: string]: unknown;
}
/**
 * Свойства любой карточки.
 */
export interface CardBase {
    paddings?: Paddings;
    /**
     * Свойство, говорящее о том, что карточка может стать визуально задизейблена.
     */
    can_be_disabled?: boolean;
    [k: string]: unknown;
}
/**
 * Объект для описания отступов ui компонента.
 */
export interface Paddings {
    left?: Dimension;
    top?: Dimension;
    right?: Dimension;
    bottom?: Dimension;
    [k: string]: unknown;
}
export interface TextCellView {
    /**
     * Тип ячейки
     */
    type: 'text_cell_view';
    content: TextView;
    divider?: DividerView;
    paddings?: Paddings;
    /**
     * Выравнивание ячейки по горизонтали
     */
    gravity?: HorizontalGravity & string;
    [k: string]: unknown;
}
/**
 * Текстовый элемент
 */
export interface TextView {
    /**
     * Текст, который нужно отобразить
     */
    text: string;
    typeface: Typeface;
    plasma_typeface?: PlasmaTypeface;
    text_color: TypeColor;
    plasma_text_color?: PlasmsColor;
    text_attributes?: TextAttribute[];
    margins?: Margins;
    /**
     * Максимальное количество строк. 0 - не ограничено.
     */
    max_lines?: number;
    /**
     * Выравнивание текста внутри его блока
     */
    alignment?: 'left' | 'center' | 'right';
    /**
     * Позволяет переносить слова по слогам
     */
    use_hyphen?: boolean;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    /**
     * Признак чувствительной информации
     */
    sensitive?: boolean;
    [k: string]: unknown;
}
/**
 * Атрибут текста (части текста)
 */
export interface TextAttribute {
    /**
     * Позиция символа (начиная с нуля), с которого применяется атрибут
     */
    start: number;
    /**
     * Количество символов, к которым применяется атрибут
     */
    length: number;
    /**
     * Атрибут: цвет символов. Задаётся как HEX c компонентом alpha в виде #AARRGGBB или #RRGGBB. Пустое значение - атрибут не применяется
     */
    color?: string;
    [k: string]: unknown;
}
/**
 * Объект для описания отступов ui компонента.
 */
export interface Margins {
    left?: Dimension;
    top?: Dimension;
    right?: Dimension;
    bottom?: Dimension;
    [k: string]: unknown;
}
/**
 * Divider/Separator. Тонка полоска, разделяющая ячейки
 */
export interface DividerView {
    /**
     * Стиль дивайдера.
     */
    style: 'default' | 'read_only';
    /**
     * Возможные размеры сепаратора/дивайдера https://www.figma.com/file/sC1HJg3HRcNjaG3rcd4b3V/Templates?node-id=289%3A3210
     */
    size: 'd1' | 'd2' | 'd3' | 'd4' | 'd5' | 'd6';
    [k: string]: unknown;
}
export interface ButtonCellView {
    /**
     * Тип ячейки
     */
    type: 'button_cell_view';
    content: ButtonView;
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Кнопки для универсальных карточек
 */
export interface ButtonView {
    /**
     * Текст кнопки.
     */
    text: string;
    /**
     * При наличии этого параметра, на новых клиентах, будет создана новая кнопка. Остальные поля button_view игнорируются (используются на старых клиента)
     */
    plasma_button?: PlasmaButtonView;
    typeface?: Typeface & string;
    plasma_typeface?: PlasmaTypeface1;
    /**
     * Стиль кнопки.
     */
    style?: 'default' | 'transparent';
    /**
     * Тип кнопки.
     */
    type?: 'accept' | 'disabled' | 'negative';
    /**
     * @minItems 1
     */
    actions: [Action, ...Action[]];
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    margins?: Margins;
    paddings?: Paddings;
    /**
     * текст который бедет озвучен, при выборе карточки, механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
/**
 * Кнопка, соответствующая дизайну Плазмы. Растягивается по размеру контента
 */
export interface PlasmaButtonView {
    /**
     * Стиль кнопки из ДС (Плазмы)
     */
    style?: 'checked' | 'clear' | 'critical' | 'primary' | 'secondary' | 'warning';
    /**
     * Текст, отображаемый на кнопке
     */
    text: string;
    /**
     * Опциональная иконка на кнопке слева от текста
     */
    icon?: ImageAddress;
    rounded_corners?: RoundedCorners & string;
    /**
     * Экшены по клику на кнопку
     *
     * @minItems 1
     */
    actions: [Action, ...Action[]];
    /**
     * Паддинги, для задания дополнительной ширины-высоты кнопки вручную
     */
    paddings?: Paddings;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    size?: ButtonSize & string;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
/**
 * Изображение из интернета. Ширина изображения будет соответствовать всей ширине карточке.
 */
export interface ExtendedImageView {
    /**
     * Адрес изображения в интернет
     */
    url: string;
    /**
     * Hash картинки в интернете(опционален)
     */
    hash?: string;
    /**
     * Массив картинок для разных цветовых схем(опционален).
     */
    urls?: ContentColorSchemeImage[];
    /**
     * Заглушка, которую показываем, когда нет изображения или оно невалидно(опционален)
     */
    placeholder?: LocalImageIdentificator;
    /**
     * Режим растягивания изображения
     */
    scale_mode?: ScaleMode & string;
    /**
     * Высота контейнера под картинку, указывается в платформонезависимых поинтах
     */
    height?: number;
    placeholder_color?: Color & string;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    /**
     * соотношение сторон картинки
     */
    fixed_ratio?: '16:9' | '3:2' | '4:3' | '1:1' | '3:4' | '9:16';
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
/**
 * Изображение из интернета с гибкими настройками размера и расположения внутри карточки
 */
export interface FlexibleImageView {
    /**
     * Ссылка на изображение
     */
    url: string;
    /**
     * Hash картинки в интернете (опционален)
     */
    hash?: string;
    /**
     * Массив картинок для разных цветовых схем(опционален).
     */
    urls?: ContentColorSchemeImage[];
    /**
     * Заглушка, которую можно показать, если изображение отсутствует или оно невалидно (опционален)
     */
    placeholder?: LocalImageIdentificator;
    placeholder_color?: Color & string;
    /**
     * Режим растягивания и расположения изображения внутри контейнера
     */
    scale_mode?: ScaleMode & string;
    gravity?: Gravity;
    size?: ContentSize;
    /**
     * Ширина изображения
     */
    width?: ContentWidth;
    /**
     * Высота изображения
     */
    height?: ContentHeight;
    /**
     * Градиентная альфа-маска для изображения. Значение определяет направление градиента
     */
    mask?: 'none' | 'bottom';
    rounded_corners?: RoundedCorners;
    actions?: Action;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
/**
 * Позиционирование контейнера с изображением внутри карточки (игнорируется, если size - match_parent)
 */
export interface Gravity {
    /**
     * Позиционирование по вертикали
     */
    vertical_gravity?: VerticalGravity;
    /**
     * Позиционирование по горизонтали
     */
    horizontal_gravity?: HorizontalGravity;
    [k: string]: unknown;
}
/**
 * Размер контента совпадает с размером контейнера
 */
export interface MatchParentContentSize {
    type: 'match_parent';
    [k: string]: unknown;
}
/**
 * Контент имеет фиксированную высоту и ширину
 */
export interface FixedContentSize {
    type: 'fixed';
    /**
     * Ширина контента
     */
    width: number;
    /**
     * Высота контента
     */
    height: number;
    [k: string]: unknown;
}
/**
 * Фиксированная ширина контента
 */
export interface FixedContentWidth {
    type: 'fixed';
    /**
     * Ширина контента
     */
    value: number;
    [k: string]: unknown;
}
/**
 * Контент занимает всю доступную ширину
 */
export interface MatchParent {
    type: 'match_parent';
    [k: string]: unknown;
}
/**
 * Размер зависит от указанного количества столбцов
 */
export interface Columns {
    type: 'columns';
    value?: number;
    [k: string]: unknown;
}
/**
 * Фиксированная высота контента
 */
export interface FixedContentHeight {
    type: 'fixed';
    /**
     * Высота контента
     */
    value: number;
    [k: string]: unknown;
}
/**
 * Высота контента зависит от его ширины с фактором
 */
export interface AspectRatio {
    type: 'aspect_ratio';
    /**
     * Отношение ширины контента к высоте
     */
    value: number;
    [k: string]: unknown;
}
/**
 * Элемент галереи состоящий из изображения и двух текстовых полей
 */
export interface MediaGalleryItem {
    /**
     * Тип элемента галереи
     */
    type: 'media_gallery_item';
    image: ImageView;
    top_text?: TextView;
    bottom_text?: TextView;
    /**
     * Отступы для контейнера который содержит top_text и bottom_text, но не содержит image
     */
    margins?: Margins;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Изображение из интернета. Ширина изображения будет соответствовать всей ширине карточке.
 */
export interface ImageView {
    /**
     * Адрес изображения в интернет
     */
    url: string;
    /**
     * Hash картинки в интернете(опционален)
     */
    hash?: string;
    /**
     * Массив картинок для разных цветовых схем(опционален).
     */
    urls?: ContentColorSchemeImage[];
    /**
     * Заглушка, которую показываем, когда нет изображения или оно невалидно(опционален)
     */
    placeholder?: LocalImageIdentificator;
    /**
     * Режим растягивания изображения
     */
    scale_mode?: ScaleMode & string;
    /**
     * Высота контейнера под картинку, указывается в платформонезависимых поинтах
     */
    height?: number;
    placeholder_color?: Color & string;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    /**
     * Размера изображения. Если есть size, то height игнорируется
     */
    size?: GridContentSize;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
/**
 * Размера контента в терминах сеток https://www.figma.com/file/L6AlpyUxFuumKEEbh4ADIh/🤖SD-Styles?node-id=26%3A17
 */
export interface GridContentSize {
    width: GridContentWidth;
    /**
     * Отношение высоты контента к ширине
     */
    aspect_ratio: number;
    [k: string]: unknown;
}
/**
 * Элемент карточки галереи с заголовком, ссылкой и описанием
 */
export interface GallerySearchContentItem {
    /**
     * Тип элемента отдельной карточки
     */
    type: 'gallery_search_content_item';
    title_text: TextView;
    image?: ImageAddress;
    link_text: TextView;
    description_text?: TextView;
    /**
     * Отступы для ячейки
     */
    paddings?: Paddings;
    actions: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    width?: GridContentWidth & string;
    [k: string]: unknown;
}
/**
 * Кнопка "Все результаты" в карточке галереи
 */
export interface GalleryMoreButtonItem {
    /**
     * Тип элемента кнопки всех результатов
     */
    type: 'gallery_more_button_item';
    /**
     * Текст подписи под кнопкой
     */
    bottom_text: TextView;
    /**
     * Иконка кнопки
     */
    icon: IconView;
    actions: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Иконка
 */
export interface IconView {
    address: ImageAddress;
    size: IconSize;
    margins?: Margins;
    tint_color?: Color;
    plasma_tint_color?: PlasmsColor;
    rounded_corners?: RoundedCorners;
    actions?: Actions;
    badge?: BadgeView;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
/**
 * Размер изображения.
 */
export interface IconSize {
    width: IconSizeDimension;
    height: IconSizeDimension;
    [k: string]: unknown;
}
/**
 * Бейдж для отображения скидок и другой короткой информации
 */
export interface BadgeView {
    background?: Gradient;
    text?: string;
    text_color?: TypeColor & string;
    plasma_text_color?: PlasmsColor;
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Элемент карточки приветствия, состоящий из двух текстовых полей и опционального изображения
 */
export interface GreetingGridItem {
    /**
     * Тип элемента карточки приветствия
     */
    type: 'greeting_grid_item';
    background_image?: ImageView;
    top_text: TextView;
    bottom_text: TextView;
    /**
     * Отступы для ячейки
     */
    paddings?: Paddings;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
export interface LeftRightCellView {
    /**
     * Тип ячейки
     */
    type: 'left_right_cell_view';
    left: LeftView;
    right?: RightView;
    divider?: DividerView;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    paddings?: Paddings;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
/**
 * Горизонтальный упорядоченный блок содержащий icon и texts
 */
export interface SimpleLeftView {
    /**
     * Тип левого элемента ячейки.
     */
    type: 'simple_left_view';
    icon?: IconView;
    texts?: VerticalTextsView;
    icon_vertical_gravity?: VerticalGravity;
    texts_vertical_gravity?: VerticalGravity;
    /**
     * Устаревшее поле, оставленное для совместимости, вместо него стоит использовать texts.title. Если поле title присутствует, то блок texts игнорируется.
     */
    title?: TextView;
    [k: string]: unknown;
}
/**
 * Вертикальный упорядоченный список содержащий title, subtitle, caption, https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=19%3A5641
 */
export interface VerticalTextsView {
    title?: TextView;
    subtitle?: TextView;
    caption?: TextView;
    margins?: Margins;
    [k: string]: unknown;
}
/**
 * Вертикальный упорядоченный список, состоит из label, icon_and_value https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=227%3A3670
 */
export interface FastAnswerLeftView {
    /**
     * Тип левого элемента ячейки.
     */
    type: 'fast_answer_left_view';
    label?: TextView;
    icon_and_value?: IconAndValueView;
    margins?: Margins;
    [k: string]: unknown;
}
/**
 * Горизонтальный упорядоченный список содержит icon и value, https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=227%3A3670
 */
export interface IconAndValueView {
    icon?: IconView;
    value: TextView;
    margins?: Margins;
    [k: string]: unknown;
}
export interface FlexibleImageLeftRightCellView {
    /**
     * Тип ячейки
     */
    type: 'flexible_image_left_right_cell_view';
    content: FlexibleImageView;
    margins?: Margins;
    [k: string]: unknown;
}
/**
 * Горизонтальный упорядоченный блок, состоящий из картинки и блока текстов, выровненный по левому краю
 */
export interface ImageTextsLeftCellView {
    type: 'image_texts_left_cell_view';
    image?: FlexibleImageView;
    texts?: VerticalTextsView;
    image_vertical_gravity?: VerticalGravity;
    [k: string]: unknown;
}
export interface PlasmaButtonCellView {
    /**
     * Тип ячейки
     */
    type: 'plasma_button_cell_view';
    content: PlasmaButtonView;
    margins?: Margins;
    [k: string]: unknown;
}
/**
 * Угловая скобка. Соответствует UITableViewCell.AccessoryType.disclosureIndicator
 */
export interface DisclosureRightView {
    /**
     * Тип правого элемента ячейки.
     */
    type: 'disclosure_right_view';
    margins?: Margins;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
/**
 * Вертикальный упорядоченный блок, содержащий опциональные detail и info_box https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=19%3A5686
 */
export interface DetailRightView {
    /**
     * Тип правого элемента ячейки.
     */
    type: 'detail_right_view';
    detail?: TextView;
    info_and_icon?: InfoAndIconView;
    margins?: Margins;
    vertical_gravity?: VerticalGravity;
    /**
     * Расположение detail относительно info_and_icon
     */
    detail_position?: 'top' | 'bottom';
    [k: string]: unknown;
}
/**
 * Горизнотальный упорядоченный блок, содержащий опциональные info и icon https://www.figma.com/file/MQHBgPkW4dqXmI2549WioI/Dev?node-id=19%3A5686
 */
export interface InfoAndIconView {
    info?: TextView;
    icon?: IconView;
    margins?: Margins;
    [k: string]: unknown;
}
export interface RoundButtonCellView {
    /**
     * Тип ячейки
     */
    type: 'round_button_cell_view';
    content: RoundButtonView;
    margins?: Margins;
    [k: string]: unknown;
}
/**
 * Круглая кнопка для универсальных карточек
 */
export interface RoundButtonView {
    icon_address: ImageAddress;
    icon_tint?: Color & string;
    plasma_icon_tint?: PlasmsColor;
    background_color?: Color & string;
    /**
     * @minItems 1
     */
    actions: [Action, ...Action[]];
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
export interface TagCellView {
    /**
     * Тип ячейки
     */
    type: 'tag_cell_view';
    content: TagView;
    margins?: Margins;
    [k: string]: unknown;
}
/**
 * Тег для универсальных карточек
 */
export interface TagView {
    text_view: TextView;
    background_color?: Color & string;
    [k: string]: unknown;
}
/**
 * Список ячеек типа right
 */
export interface RightCellArrayView {
    type: 'right_cell_array_view';
    /**
     * Направление списка (вертикальное или горизонтальное)
     */
    orientation?: 'vertical' | 'horizontal';
    items?: RightView[];
    [k: string]: unknown;
}
/**
 * Все ячейки растягиваются по вертикали по размеру родителя
 */
export interface HorizontalStackCellView {
    /**
     * Тип ячейки
     */
    type: 'horizontal_stack_cell_view';
    /**
     * @minItems 1
     */
    items?: [unknown, ...unknown[]];
    divider?: DividerView;
    /**
     * Выравнивание ячейки для случая, когда все элементы имеют intrinsic размер
     */
    alignment?: HorizontalGravity;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    paddings?: Paddings;
    [k: string]: unknown;
}
export interface ImageCellView {
    /**
     * Тип ячейки
     */
    type: 'image_cell_view';
    content: ImageView;
    paddings?: Paddings;
    [k: string]: unknown;
}
export interface DetailsCellView {
    /**
     * Тип ячейки
     */
    type: 'details_cell_view';
    /**
     * @minItems 1
     */
    details: [DetailRightView, ...DetailRightView[]];
    paddings?: Paddings;
    [k: string]: unknown;
}
export interface WeatherCellView {
    /**
     * Тип ячейки
     */
    type: 'weather_cell_view';
    /**
     * @minItems 1
     */
    content: [WeatherView, ...WeatherView[]];
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Строка карточки погоды на неделю
 */
export interface WeatherView {
    weekday: string;
    date: string;
    day: string;
    night: string;
    icon: IconView;
    [k: string]: unknown;
}
/**
 * Ячейка, отображающая контент по правому краю
 */
export interface RightSideCellView {
    /**
     * Тип ячейки
     */
    type: 'right_side_cell_view';
    content: RightView;
    paddings?: Paddings;
    [k: string]: unknown;
}
export interface FlexibleImageCellView {
    /**
     * Тип ячейки
     */
    type: 'flexible_image_cell_view';
    content: FlexibleImageView;
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Горизонтальный лэйаут с центрированием элементов и выравниванием их по ширине
 */
export interface HorizontalCellsView {
    type: 'horizontal_cells_view';
    /**
     * @minItems 1
     * @maxItems 6
     */
    cells:
        | [HorizontalCellContentView]
        | [HorizontalCellContentView, HorizontalCellContentView]
        | [HorizontalCellContentView, HorizontalCellContentView, HorizontalCellContentView]
        | [HorizontalCellContentView, HorizontalCellContentView, HorizontalCellContentView, HorizontalCellContentView]
        | [
              HorizontalCellContentView,
              HorizontalCellContentView,
              HorizontalCellContentView,
              HorizontalCellContentView,
              HorizontalCellContentView,
          ]
        | [
              HorizontalCellContentView,
              HorizontalCellContentView,
              HorizontalCellContentView,
              HorizontalCellContentView,
              HorizontalCellContentView,
              HorizontalCellContentView,
          ];
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Ячейка с вертикально расположенными элементами - состоит из иконки и текстов
 */
export interface VerticalIconTextView {
    type: 'vertical_icon_text_view';
    icon?: IconView;
    texts?: VerticalTextsView;
    actions?: Actions;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    /**
     * текст который бедет озвучен при выборе карточки механизмом accessibility
     */
    accessibility?: string;
    [k: string]: unknown;
}
/**
 * Пустая ячейка-спейсер
 */
export interface SpacerView {
    type: 'spacer_view';
    [k: string]: unknown;
}
export interface OperatorChatCellView {
    /**
     * Тип ячейки
     */
    type: 'operator_chat_cell_view';
    icon: IconView;
    placeholder: TextView;
    title: {
        style: TextViewStyle;
        margins?: Margins;
        [k: string]: unknown;
    };
    subtitle: {
        style: TextViewStyle;
        margins?: Margins;
        [k: string]: unknown;
    };
    badge: {
        color: Color;
        plasma_color?: PlasmsColor;
        [k: string]: unknown;
    };
    paddings?: Paddings;
    [k: string]: unknown;
}
/**
 * Стиль текстового элемента
 */
export interface TextViewStyle {
    typeface: Typeface;
    plasma_typeface?: PlasmaTypeface;
    text_color: TypeColor;
    plasma_text_color?: PlasmsColor;
    /**
     * Максимальное количество строк. 0 - не ограничено.
     */
    max_lines?: number;
    /**
     * Выравнивание текста внутри его блока
     */
    alignment?: 'left' | 'center' | 'right';
    /**
     * Позволяет переносить слова по слогам
     */
    use_hyphen?: boolean;
    [k: string]: unknown;
}
/**
 * Содержимое QR-code. Ширина сгенерированного изображения будет соответствовать всей ширине карточке
 */
export interface QRCodeCard {
    /**
     * Тип ячейки
     */
    type: 'qr_code_card';
    /**
     * Содержимое QR-кода
     */
    data: string;
    /**
     * Размера изображения
     */
    size?: GridContentSize;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Карточка с вертикальным списком ячеек для отображения в ленте.
 */
export interface DiscoveryCard {
    /**
     * Ячейки с контентом карточки
     */
    cells: {
        top_cell?: CellView;
        middle_cell?: CellView;
        bottom_cell?: CellView;
        [k: string]: unknown;
    };
    background_image?: FlexibleImageView;
    /**
     * Цвет, которым заливается фон карточки. Задаётся как HEX c компонентом alpha в виде #AARRGGBB или #RRGGBB
     */
    background_color?: string;
    /**
     * Имеет ли карточка затемнение в нижней части
     */
    has_fade?: boolean;
    /**
     * Количество колонок, которое занимает карточка по ширине
     */
    width_columns?: 1 | 2 | 3 | 4;
    height?: ContentHeight;
    width?: ContentWidth;
    /**
     * Соотношение сторон карточки - W:H
     */
    aspect_ratio?: '1:1' | '2:3' | '3:2' | '3:4' | '16:9';
    actions?: Actions;
    type: 'discovery_card';
    paddings?: Paddings;
    /**
     * ID карточки, если это элемент терминального виджета
     */
    widget_id?: string;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Горизонтальная галерея с категориями
 */
export interface WidgetGalleryWithCategories {
    /**
     * Описание цветов для чипа категорий
     */
    chip?: {
        background_checked?: ButtonColor & string;
        /**
         * Цвет текста выбранной категории, либо цвет обводки выбранной картинки
         */
        type_color_checked?: TypeColor & string;
        /**
         * Цвет текста категории, либо цвет обводки картинки
         */
        type_color_unchecked?: TypeColor & string;
        [k: string]: unknown;
    };
    /**
     * Тип элементов галереи, items должны быть того же типа, иначе галерея не будет отображаться
     */
    items_type?: 'discovery_card' | 'list_card';
    /**
     * Тип элемента категории
     */
    chips_type?: 'string' | 'flexible_image_view';
    /**
     * Упорядоченный список категорий с подмассивами из карточек
     */
    categories: {
        items: Items;
        title: string | FlexibleImageView;
        [k: string]: unknown;
    }[];
    /**
     * Отступы списка категорий
     */
    categories_paddings?: Paddings;
    type: 'widget_gallery_with_categories';
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Горизонтальная галерея
 */
export interface WidgetGallery {
    /**
     * @minItems 1
     */
    items: [DiscoveryCard, ...DiscoveryCard[]];
    type: 'widget_gallery';
    /**
     * Расстояние между двумя соседними карточками галереи
     */
    spacing?: Dimension & string;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Виджет с одиночной карточкой
 */
export interface WidgetSingleCard {
    item: DiscoveryCard;
    type: 'widget_single_card';
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Виджет с заголовком раздела и действием
 */
export interface WidgetTitleCard {
    cell: LeftRightCellView;
    type: 'widget_title_card';
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
export interface WidgetTwoColumns {
    /**
     * Группировка карточек в две колонки
     */
    type: 'widget_two_columns';
    left: ColumnView;
    right: ColumnView;
    paddings?: Paddings;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Вертикальный список карточек в одной колонке
 */
export interface ColumnView {
    /**
     * @minItems 1
     * @maxItems 3
     */
    cards: [DiscoveryCard] | [DiscoveryCard, DiscoveryCard] | [DiscoveryCard, DiscoveryCard, DiscoveryCard];
    [k: string]: unknown;
}
/**
 * Виджет с кастомизируемым вложенным контентом
 */
export interface WidgetNestedContentCard {
    type: 'widget_nested_content_card';
    header?: {
        background_image?: FlexibleImageView;
        /**
         * Верхняя ячейка хэдера
         */
        header_cell?: CellView;
        /**
         * Высота хэдера
         */
        height?: ContentHeight;
        actions?: Actions;
        [k: string]: unknown;
    };
    /**
     * Цвет, которым заливается фон карточки. Задаётся как HEX c компонентом alpha в виде #AARRGGBB или #RRGGBB
     */
    background_color?: string;
    /**
     * Ячейка, расположенная до вложенного контента. Располагается под хэдером
     */
    body_cell?: CellView;
    nested_content: NestedContent;
    paddings?: Paddings;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Тип вложенного контента - горизонтальная галерея
 */
export interface NestedContentGallery {
    type: 'nested_content_gallery';
    items: ImageTextItem[];
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
export interface ImageTextItem {
    type: 'image_text_item';
    image?: FlexibleImageView;
    texts?: VerticalTextsView;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    actions?: Actions;
    width: ContentWidth;
    [k: string]: unknown;
}
/**
 * Вложенный контент для виджета в виде небольшого списка с опциональной кнопкой
 */
export interface NestedContentList {
    type: 'nested_content_list';
    list: (LeftRightCellView & {
        [k: string]: unknown;
    })[];
    /**
     * Опциональный блок, который располагается после списка
     */
    bottom_block?: {
        divider?: DividerView;
        cell?: CellView;
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Виджет кнопки
 */
export interface WidgetButton {
    type: 'widget_button';
    /**
     * Стиль кнопки из ДС (Плазмы)
     */
    style?: 'primary' | 'secondary' | 'warning' | 'checked';
    size?: ButtonSize & string;
    /**
     * Текст, отображаемый на кнопке
     */
    text: string;
    /**
     * Опциональная иконка на кнопке слева от текста
     */
    icon?: ImageAddress;
    /**
     * Экшены по клику на кнопку
     *
     * @minItems 1
     */
    actions: [Action, ...Action[]];
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Стек из вертикальных карточек
 */
export interface WidgetVerticalCards {
    type: 'widget_vertical_cards';
    items: DiscoveryCard[];
    widget_id?: string;
    /**
     * Id для отправки в метрику
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Элемент списка, состоящий из двух текстовых полей
 */
export interface SimpleItem {
    title: string;
    body: string;
    [k: string]: unknown;
}
/**
 * Карточка перевода на оператора
 */
export interface OperatorCard {
    /**
     * Тип карточки
     */
    type?: 'transfer_to_operator';
    /**
     * Заголовок карточки перевода на оператора
     */
    header: string;
    /**
     * Заголовок карточки с таймером
     */
    title_with_timer: string;
    /**
     * Заголовок карточки без таймера
     */
    title_without_timer: string;
    /**
     * Заголовок для активной карточки из истории (вэб)
     */
    title_open_chat?: string;
    /**
     * Заголовок карточки после закрытия сессии
     */
    title_close_session: string;
    /**
     * Время в секундах до автоматического открытия
     */
    time_to_open_chat: number;
    /**
     * Время в секундах до окончания сессии
     */
    time_to_close_session: number;
    /**
     * Кнопка старта сессии
     */
    open_chat_button: OperatorCardButton;
    /**
     * Кнопка перехода в активный чат
     */
    active_chat_button: OperatorCardButton;
    /**
     * Кнопка скрытия карточки
     */
    cancel_chat_button: OperatorCardButton;
    /**
     * Кнопка перехода в историю
     */
    history_chat_button: OperatorCardButton;
    [k: string]: unknown;
}
/**
 * Кнопка карточки оператора
 */
export interface OperatorCardButton {
    /**
     * Заголовок кнопки
     */
    title: string;
    /**
     * @minItems 1
     */
    actions: [Action, ...Action[]];
    [k: string]: unknown;
}
export interface PolicyRunAppComand {
    command: 'POLICY_RUN_APP';
    nodes: {
        server_action: {
            app_info: {
                systemName: string;
                [k: string]: unknown;
            };
            parameters: {
                [k: string]: unknown;
            };
            [k: string]: unknown;
        };
        [k: string]: unknown;
    };
    [k: string]: unknown;
}
/**
 * Предложения, которые смартап может сделать пользователю в зависимости от контекста диалога. Предложения могут быть представлены в виде кнопок и карточек. Важно! В интерфейсе SberBox предложения носят информационный характер. Оформляйте их в виде подсказок, а не кнопок.
 */
export interface Suggestions {
    /**
     * Список кнопок с предложениями смартапа. Каждая кнопка представлена в виде отдельного объекта.
     */
    buttons: Button[];
    [k: string]: unknown;
}
/**
 * Описание одной кнопки саджеста. Если пришел объект actions, то action игнорируется
 */
export interface Button {
    /**
     * Название кнопки, которое отображается в интерфейсе ассистента.
     */
    title: string;
    action?: Action;
    /**
     * @minItems 1
     */
    actions?: [Action, ...Action[]];
    /**
     * Id для отправки в метрику.
     */
    log_id?: string;
    [k: string]: unknown;
}
/**
 * Подсказки для сервиса синтеза и распознавания речи.
 */
export interface ASRHints {
    /**
     * Позволяет использовать список слов или фраз, не хранящихся в ASR, для одноразового определения контекста.
     */
    words?: string[];
    /**
     * Позволяет включить опцию обработки коротких слов и букв, которые по умолчанию блокируются ASR.
     */
    enable_letters?: boolean;
    /**
     * Меняет интервал ожидания речи пользователя. Возможные значения от 2 до 20 секунд.
     */
    nospeechtimeout?: number;
    /**
     * Позволяет выбирать модель распознавания речи в запросе. Если передаётся валидная модель (media или general), то в запросе она может быть изменена. Модель media распознаёт русский и английский языки. Модель general использует только русский язык.
     */
    model?: 'media' | 'general';
    contexts?: ASRContextsId;
    [k: string]: unknown;
}
export interface Hints {
    /**
     * Если параметр true, то показываем хинты случайным образом.
     */
    random?: boolean;
    /**
     * Параметр для бездействия. Через сколько начинаем показывать хинты.
     */
    start_time?: number;
    items: Hint[];
    [k: string]: unknown;
}
export interface Hint {
    /**
     * Первые слова, которые отображаются полупрозрачным текстом.
     */
    prefix?: string;
    /**
     * Основной текст.
     */
    text: string;
    /**
     * Время показа хинта в миллисекундах.
     */
    alive_time: number;
    /**
     * Время после показа хинта до показа следующего в массиве.
     */
    next_time: number;
    [k: string]: unknown;
}
